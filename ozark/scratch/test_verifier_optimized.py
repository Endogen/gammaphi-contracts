
def final_exponentiation_old(p: list) -> list:
    return fq12_exp(p, ((p2 ** 12 - 1) // curve_order))


# TEST
twistGen = [[9496696083199853777875401760424613833161720860855390556979200160215841136960, 11461925177900819176832270005713103520318409907105193817603008068482420711462], [6170940445994484564222204938066213705353407449799250191249554538140978927342, 18540402224736191443939503902445128293982106376239432540843647066670759668214], [0, 1], [0, 1]]
twistGen = [[11559732032986387107991004021392285783925812861821192530917403151452391805634, 10857046999023057135944570762232829481370756359578518086990519993285655852781], [4082367875863433681332203403145435568316851327593401208105741076214120093531, 8495653923123431417604973247489272438418190587263600148770280649306958101930], [0, 1], [0, 1]]
curveGen = [1, 2, 1, 1]

assert fq2_eq(fq2_mul(twistB, twistB), fq2_square(twistB))
assert fq2_eq(fq2_mul(fq2_invert(twistB), twistB), fq2_one())
assert fq2_eq(fq2_mul(fq2_invert(twistB), twistB), fq2_one())

assert twist_double(twistGen) == twist_mul(twistGen, 2), 'Invalid'
assert curve_double(curveGen) == curve_mul(curveGen, 2), 'Invalid curveGen'
assert twist_double(twistGen) == twist_add(twistGen, twistGen), 'Invalid add'

assert curve_is_on_curve(curveGen), 'bad curve'
assert twist_is_on_curve(twistGen), 'bad twist'
assert twist_is_on_curve(twist_mul(twistGen, 1)), 'bad twist'

a1 = curve_mul(curveGen, 1)
b1 = twist_mul(twistGen, 1)

an1 = curve_mul(curveGen, 21888242871839275222246405745257275088548364400416034343698204186575808495616)


fq12 = fq12_one()
assert fq12_is_one(fq12), 'Unity'
fq12p = fq12_exp(fq12, 2)
assert fq12_is_one(fq12p)

assert pairing(b1, a1), 'bad pairing'
assert pairing(b1, an1), 'bad neg pairing'

test1 = [[[7071072712449352756695188552202973791970844913724023989256899108983312933794, 21205616826258241632092799817110394723578809309171744481112229395290577214345], [20213689717355515975199896368924111170733930425953222496450409396822391579299, 20875225469750718852440707627102189500929559116509929952388409647753965887855], [689531845833783953584676760899707603057193658601325213725849345556014139921, 94345572345924009761847751742403755467460909130988649227493664242436184107]], [[14996418552231582409771331393731221330868796632644836325644144277394866030402, 2777243205107130210473613538558080048594967486596032566177643673568010869524], [19792648560403664202572435356449213023119929194549271587333751555830194530340, 17392920703554085815907143824940908784026585548662604713673322240125348438354], [5034774965665869402928425342195277908820139063485273572262602523587833634592, 14723639279895112453174283987252419471552944052512823734020368889970239037724]]]
assert fq12_is_one(fq12_mul(fq12_invert(test1), test1))
assert fq12_is_zero(fq12_sub(fq12_exp(test1, 2), fq12_mul(test1, test1)))
assert final_exponentiation(test1)[0][0][0] == final_exponentiation_old(test1)[0][0][0]


proof_data = { 'pi_a':
   [ '13774734694806893345431794156356514571363079254825067879443184821206447822750',
     '5209428786776521202856824112990553528771784326411286192918798384107382954954',
     '1', '1'],
  'pi_b':
   [ [ '5173078677927959662734785177277144661908479282203617744477925437547277462997',
       '5008919259924401514229994859356982028735024574680767144772652733435392622987' ],
     [ '16237021846884756770715728474067652062799669637447076030779615223774369289462',
       '2712062232854900554770345916314277164381058075864652478551356549239494502978' ],
     [ '1', '0' ],
     [ '1', '0' ] ],
  'pi_c':
   [ '11709473128502841396551378248174338037383283271432381215788718530577500746586',
     '4008944338641772649658914022116044050220759783362908976331068335514955377268',
     '1', '1' ],
  'publicSignals':
   [ '19472974227534089877661842339747066589074924514634613071633204486088526229164',
     '18099330611372391564551405916666174527872771719801289262717800528837024370849',
     '104194005008344116962432275389062747476573328740969784167625267554300778358',
     '0',
     '0',
     '0' ] }

a = proof_data['pi_a']
b = proof_data['pi_b']
c = proof_data['pi_c']

inputs = proof_data['publicSignals']

print('Starting proof!!!')
if not verify_proof(a=a, b=b, c=c, inputs=inputs):
    print('Failed.')
else:
    print('Succeeded.')