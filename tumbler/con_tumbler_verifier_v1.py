import con_pairing_v1 as pairing

vk = {
}

vk['alfa1'] = ((17378857798632971493497180149537382035964135006726829114990048566595095297232,10925482734306809473472907739353581480103790167911762858260289552213066095077))
vk['beta2'] = ((pairing.FQ2([14678369676480676018041007407047050419517410782400890539375043176766070640622,4102658644726914283092519579814690014443113406195204553749313725494952685059]), pairing.FQ2([6214012295821665139102321255937111677427810882155064460667104370294388702202,14785932107685913320209622026789567240628269303640156177725237129377846447639])))
vk['gamma2'] = ((pairing.FQ2([8526459553898430405339315567522063243951381820445199457723154425636314770205,20367125079275460956628822107076324407848239361593207458646931678251600859155]), pairing.FQ2([3001465273359870090656294901544953075300935884539442661289485392468603236909,587346822231296919487241750944065188673175047851946121356681427740679015533])))
vk['delta2'] = ((pairing.FQ2([7443066645953117958044262817292544375867916981353841182932120172111851422690,16582334974051919626279445478215194891704053844665747342365159175557734480406]), pairing.FQ2([11729263881581239412945078908219951786085447495254840103867471381158288790839,12898246207701807949388895838570889401761351609518582013128984092901504444133])))
IC = [None] * 7
IC[0] = (7766573528050008175415466465557534357548182280344958857662193316803960613484,6345027867789420366597724316125109293155521850108221192260209535637404445192)
IC[1] = (138708335352887076062381407509137311741228361289783221640271801186527207892,16622281537505066267043614856409953085435569402478880056003455235596383299815)
IC[2] = (11177916500221430014868601525449956296464051343352535104224081696501866909207,10540427789489050777437186319826719877786651976871322901392900632883888877048)
IC[3] = (2882712914072059224169154240131476960609121375690787644121973468017867649852,11223512480635760016651024206355443468209957787271395314285154444002028646069)
IC[4] = (10222283262636979870114985003027980371215158325383425322898699133393486567852,16612317571140825780609843683022636760754528788246814058158535547203972811457)
IC[5] = (96402269825229760060786085300831723761088791081230597546739040819826538612,19643285518390200289189267750274040642866305945069783677514063925049451332104)
IC[6] = (12036864716805376059704817835769991972117900689320710722148843252073133287654,14710920364131507894705640775487518001088249363322952224706828096668440441431)
vk['IC'] = (IC)


@export
def verify(
    inputs: list, 
    proof: dict) -> int:
    snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617
    assert len(inputs) + 1 == len(IC), "verifier-bad-input"
    # Compute the linear combination vk_x
    vk_x = (0, 0)
    for i in range(len(inputs)):
        assert inputs[i] < snark_scalar_field, "verifier-gte-snark-scalar-field"
        vk_x = pairing.add(vk_x, pairing.multiply(IC[i+1], inputs[i]))
    vk_x = pairing.add(vk_x, IC[0])
    p1 = (
        pairing.neg(proof['A']),
        vk['alfa1'],
        vk_x,
        proof['C']
    )
    p2 = (
        (pairing.FQ2(proof['B'][0]), pairing.FQ2(proof['B'][1])),
        vk['beta2'],
        vk['gamma2'],
        vk['delta2']
    )
    if not all([pairing.pairing(p2[i], p1[i]) for i in range(1)]):
        return 1
    return 0

@export
def verify_proof(
    a: list,
    b: list,
    c: list,
    inputs: list
) -> bool:
    proof = {}
    proof['A'] = (a[0], a[1])
    proof['B'] = (pairing.FQ2([b[0][0], b[0][1]]), pairing.FQ2([b[1][0], b[1][1]]))
    proof['C'] = (c[0], c[1])

    input_values = []
    for i in range(len(inputs)):
        input_values.append(inputs[i])

    if verify(input_values, proof) == 0:
        return True
    else:
        return False


